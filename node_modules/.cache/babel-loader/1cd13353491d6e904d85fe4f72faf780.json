{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Code/testProjectSocial/socialNetwork/src/components/common/Paginator/Paginator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"./Paginator.module.css\";\nimport cn from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet Paginator = ({\n  totalItemsCount,\n  pageSize,\n  currentPage,\n  onPageChanged,\n  portionSize = 10\n}) => {\n  _s();\n\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.paginator,\n    children: [portionNumber > 1, \" &&\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPortionNumber(portionNumber - 1);\n      },\n      children: \"Prev\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: cn({\n          [styles.selectPage]: currentPage === p\n        }, styles.pageNumber),\n        onClick: e => {\n          onPageChanged(p);\n        },\n        children: p\n      }, p, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 24\n      }, this);\n    }), portionCount > portionNumber, \" &&\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPortionNumber(portionNumber + 1);\n      },\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Paginator, \"8p8zb1vvZvsuWyQQS16DuuzsJLU=\");\n\n_c = Paginator;\nexport default Paginator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginator\");","map":{"version":3,"sources":["/Users/admin/Documents/Code/testProjectSocial/socialNetwork/src/components/common/Paginator/Paginator.jsx"],"names":["React","useState","styles","cn","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","filter","p","map","selectPage","pageNumber","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;;;AAEA,IAAIC,SAAS,GAAG,CAAC;AAACC,EAAAA,eAAD;AAAkBC,EAAAA,QAAlB;AAA4BC,EAAAA,WAA5B;AAAyCC,EAAAA,aAAzC;AAAwDC,EAAAA,WAAW,GAAG;AAAtE,CAAD,KAA+E;AAAA;;AAE3F,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,eAAe,GAAGC,QAA5B,CAAjB;AAEA,MAAIO,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AAED,MAAIE,YAAY,GAAGL,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGD,WAAvB,CAAnB;AACA,MAAI,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIkB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBR,WAAtB,GAAoC,CAAhE;AACA,MAAIW,sBAAsB,GAAGH,aAAa,GAAGR,WAA7C;AAGA,sBAAO;AAAK,IAAA,SAAS,EAAEP,MAAM,CAACmB,SAAvB;AAAA,eACFJ,aAAa,GAAG,CADd,sBAEH;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnBC,QAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFG,EAOFJ,KAAK,CACDS,MADJ,CACWC,CAAC,IAAIA,CAAC,IAAIJ,qBAAL,IAA8BI,CAAC,IAAIH,sBADnD,EAEII,GAFJ,CAESD,CAAD,IAAO;AACR,0BAAO;AAAM,QAAA,SAAS,EAAEpB,EAAE,CAAC;AACvB,WAACD,MAAM,CAACuB,UAAR,GAAqBlB,WAAW,KAAKgB;AADd,SAAD,EAEvBrB,MAAM,CAACwB,UAFgB,CAAnB;AAIM,QAAA,OAAO,EAAGC,CAAD,IAAO;AACZnB,UAAAA,aAAa,CAACe,CAAD,CAAb;AACH,SANP;AAAA,kBAMUA;AANV,SAGWA,CAHX;AAAA;AAAA;AAAA;AAAA,cAAP;AAOH,KAVJ,CAPE,EAmBFP,YAAY,GAAGC,aAnBb,sBAoBH;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnBC,QAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAwBH,CAvCD;;GAAIb,S;;KAAAA,S;AAyCJ,eAAeA,SAAf","sourcesContent":["import React, {useState} from \"react\";\nimport styles from \"./Paginator.module.css\";\nimport cn from 'classnames'\n\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize)\n    let [portionNumber, setPortionNumber] = useState(1)\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    let rightPortionPageNumber = portionNumber * portionSize\n\n\n    return <div className={styles.paginator}>\n        {portionNumber > 1} &&\n        <button onClick={() => {\n            setPortionNumber(portionNumber - 1)\n        }}>Prev</button>\n\n\n        {pages\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map((p) => {\n                return <span className={cn({\n                    [styles.selectPage]: currentPage === p\n                }, styles.pageNumber)}\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n\n        {portionCount > portionNumber} &&\n        <button onClick={() => {\n            setPortionNumber(portionNumber + 1)\n        }}>Next</button>\n    </div>\n}\n\nexport default Paginator"]},"metadata":{},"sourceType":"module"}