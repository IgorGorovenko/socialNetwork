{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  const response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  const response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const getSecurityAPI = (email, password, rememberMe) => async dispatch => {\n  const response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  const response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/admin/Documents/Code/testProjectSocial/socialNetwork/src/redux/authReducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","message","messages","length","_error","getSecurityAPI","logout"],"mappings":"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","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n    type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}\n})\nexport const getAuthUserData = () => async (dispatch) => {\n    const response = await authAPI.me()\n\n    if (response.data.resultCode === 0) {\n        let {id, login, email} = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe)\n\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData())\n    } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n}\n\n\n\nexport const getSecurityAPI = (email, password, rememberMe) => async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe)\n\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData())\n    } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    const response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer"]},"metadata":{},"sourceType":"module"}