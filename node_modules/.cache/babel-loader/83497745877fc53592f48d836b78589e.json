{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Code/testProjectSocial/socialNetwork/src/components/Profile/ProfileContainer.jsx\";\nimport React from \"react\";\nimport Profile from \"./Profile\";\nimport * as axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { getUserProfile } from \"../../redux/profileReducer\";\nimport { withRouter } from \"react-router\";\nimport { Redirect } from \"react-router-dom\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProfileContainer extends React.Component {\n  componentDidMount() {\n    let userId = this.props.match.params.userId;\n\n    if (!userId) {\n      userId = 2;\n    }\n\n    this.props.getUserProfile(userId);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Profile, { ...this.props,\n      profile: this.props.profile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer);\n_c = AuthRedirectComponent;\n\nlet mapStateToPropsForRedirect = state => ({\n  isAuth: state.auth.isAuth\n});\n\nAuthRedirectComponent = connect(mapStateToPropsForRedirect);\n\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile\n});\n\nlet WithUrlDataContainerComponents = withRouter(AuthRedirectComponent);\n_c2 = WithUrlDataContainerComponents;\nexport default connect(mapStateToProps, {\n  getUserProfile\n})(WithUrlDataContainerComponents);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthRedirectComponent\");\n$RefreshReg$(_c2, \"WithUrlDataContainerComponents\");","map":{"version":3,"sources":["/Users/admin/Documents/Code/testProjectSocial/socialNetwork/src/components/Profile/ProfileContainer.jsx"],"names":["React","Profile","axios","connect","getUserProfile","withRouter","Redirect","withAuthRedirect","ProfileContainer","Component","componentDidMount","userId","props","match","params","render","profile","AuthRedirectComponent","mapStateToPropsForRedirect","state","isAuth","auth","mapStateToProps","profilePage","WithUrlDataContainerComponents"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,cAAR,QAA6B,4BAA7B;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;;;AAEA,MAAMC,gBAAN,SAA+BR,KAAK,CAACS,SAArC,CAA+C;AAE3CC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAArC;;AACA,QAAI,CAACA,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,CAAT;AACH;;AACD,SAAKC,KAAL,CAAWR,cAAX,CAA0BO,MAA1B;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,OAAD,OAAa,KAAKH,KAAlB;AAAyB,MAAA,OAAO,EAAE,KAAKA,KAAL,CAAWI;AAA7C;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAd0C;;AAmB/C,IAAIC,qBAAqB,GAAGV,gBAAgB,CAACC,gBAAD,CAA5C;KAAIS,qB;;AAEJ,IAAIC,0BAA0B,GAAIC,KAAD,KAAY;AACzCC,EAAAA,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWD;AADsB,CAAZ,CAAjC;;AAIAH,qBAAqB,GAAGd,OAAO,CAACe,0BAAD,CAA/B;;AAKA,IAAII,eAAe,GAAIH,KAAD,KAAY;AAC9BH,EAAAA,OAAO,EAAEG,KAAK,CAACI,WAAN,CAAkBP;AADG,CAAZ,CAAtB;;AAIA,IAAIQ,8BAA8B,GAAGnB,UAAU,CAACY,qBAAD,CAA/C;MAAIO,8B;AAEJ,eAAerB,OAAO,CAACmB,eAAD,EAAkB;AAAClB,EAAAA;AAAD,CAAlB,CAAP,CAA2CoB,8BAA3C,CAAf","sourcesContent":["import React from \"react\";\nimport Profile from \"./Profile\";\nimport * as axios from \"axios\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile} from \"../../redux/profileReducer\";\nimport {withRouter} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nclass ProfileContainer extends React.Component {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = 2\n        }\n        this.props.getUserProfile(userId)\n    }\n\n    render() {\n        return (\n            <Profile {...this.props} profile={this.props.profile}/>\n        )\n    }\n}\n\n\n\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer)\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n})\n\nAuthRedirectComponent = connect(mapStateToPropsForRedirect)\n\n\n\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile\n})\n\nlet WithUrlDataContainerComponents = withRouter(AuthRedirectComponent)\n\nexport default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponents)"]},"metadata":{},"sourceType":"module"}