{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null // if null, then captcha is not requere\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  const response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  const response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    // success, get auth data\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => async dispatch => {\n  const response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/admin/Documents/Code/testProjectSocial/socialNetwork/src/redux/authReducer.js"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","getCaptchaUrl","message","messages","length","_error","url","logout"],"mappings":"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","sourcesContent":["import {authAPI, securityAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null // if null, then captcha is not requere\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n    type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}\n})\n\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\n})\n\n\n\n\nexport const getAuthUserData = () => async (dispatch) => {\n    const response = await authAPI.me()\n\n    if (response.data.resultCode === 0) {\n        let {id, login, email} = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe)\n    if (response.data.resultCode === 0) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (response.data.resultCode === 10) {\n            dispatch(getCaptchaUrl())\n        }\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n}\n\n\n\nexport const getCaptchaUrl = () => async (dispatch) => {\n    const response = await securityAPI.getCaptchaUrl()\n    const captchaUrl = response.data.url\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = () => async (dispatch) => {\n    const response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer"]},"metadata":{},"sourceType":"module"}